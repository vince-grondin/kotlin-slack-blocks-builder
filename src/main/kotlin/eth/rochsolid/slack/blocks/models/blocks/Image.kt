package eth.rochsolid.slack.blocks.models.blocks

import kotlinx.serialization.SerialName


/**
 * Displays an image.
 *
 * Examples:
 * - An image block using `image_url` ([view this in Block Kit Builder](https://api.slack.com/tools/block-kit-builder?blocks=%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22type%22%3A%20%22image%22%2C%0A%20%20%20%20%20%20%22title%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22type%22%3A%20%22plain_text%22%2C%0A%20%20%20%20%20%20%20%20%22text%22%3A%20%22Please%20enjoy%20this%20photo%20of%20a%20kitten%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22block_id%22%3A%20%22image4%22%2C%0A%20%20%20%20%20%20%22image_url%22%3A%20%22http%3A%2F%2Fplacekitten.com%2F500%2F500%22%2C%0A%20%20%20%20%20%20%22alt_text%22%3A%20%22An%20incredibly%20cute%20kitten.%22%0A%20%20%20%20%7D%0A%5D))
 * ```json
 * {
 *   "type": "image",
 *   "title": {
 *     "type": "plain_text",
 *     "text": "Please enjoy this photo of a kitten"
 *   },
 *   "block_id": "image4",
 *   "image_url": "http://placekitten.com/500/500",
 *   "alt_text": "An incredibly cute kitten."
 * }
 * ```
 * - An image block using `slack_file` with a `url`
 * ```json
 * {
 *   "type": "image",
 *   "title": {
 *     "type": "plain_text",
 *     "text": "This image block contains a reference to a Slack image file."
 *   },
 *   "block_id": "image4",
 *   "slack_file": {
 *     "url": "https://files.slack.com/files-pri/T0123456-F0123456/xyz.png"
 *   },
 *   "alt_text": "Slack file object."
 * }
 * ```
 * - An image block using `slack_file` with a `id`:
 * ```json
 * {
 *   "type": "image",
 *   "title": {
 *     "type": "plain_text",
 *     "text": "This image block contains a reference to a Slack image file."
 *   },
 *   "block_id": "image4",
 *   "slack_file": {
 *     "id": "F0123456",
 *   },
 *   "alt_text": "Slack file object."
 * }
 * ```
 */
sealed class Image : Block(type = Type.IMAGE) {
    abstract val altText: String
    abstract val title: CompositionObject.Text.PlainText?

    data class Url(
        /**
         * A unique identifier for a block. If not specified, a block_id will be generated by the Slack API.
         * You can use this [blockID] when you receive an interaction payload to identify the source of the action.
         * Maximum length for this field is 255 characters. [blockID] should be unique for each message and each iteration
         * of a message. If a message is updated, use a new [blockID].
         */
        @SerialName("block_id")
        override val blockID: BlockID?,
        /**
         * A plain-text summary of the image. This should not contain any markup.
         * Maximum length for this field is 2000 characters.
         */
        @SerialName("alt_text")
        override val altText: String,
        /**
         * The URL for a publicly hosted image.
         * You must provide either an image_url or slack_file. Maximum length for this field is 3000 characters.
         */
        @SerialName("image_url")
        val imageUrl: String?,
        /**
         * An optional title for the image in the form.
         * Maximum length for the text in this field is 2000 characters.
         */
        override val title: CompositionObject.Text.PlainText?
    ) : Image()

    /**
     * A [Slack image file object](https://api.slack.com/reference/block-kit/composition-objects#slack_file) that
     * defines the source of the image.
     */
    data class SlackFile(
        /**
         * A unique identifier for a block. If not specified, a block_id will be generated by the Slack API.
         * You can use this [blockID] when you receive an interaction payload to identify the source of the action.
         * Maximum length for this field is 255 characters. [blockID] should be unique for each message and each iteration
         * of a message. If a message is updated, use a new [blockID].
         */
        @SerialName("block_id")
        override val blockID: BlockID?,
        /**
         * A plain-text summary of the image. This should not contain any markup.
         * Maximum length for this field is 2000 characters.
         */
        @SerialName("alt_text")
        override val altText: String,
        /**
         * An optional title for the image in the form.
         * Maximum length for the text in this field is 2000 characters.
         */
        override val title: CompositionObject.Text.PlainText?
    ) : Image()
}
