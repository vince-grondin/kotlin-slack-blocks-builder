package eth.rochsolid.slack.blocks.models.blocks

import kotlinx.serialization.SerialName
import java.net.URL


/**
 * Displays an embedded video player.
 * A video block is designed to embed videos in all app surfaces (e.g. link unfurls, messages, modals, App Home) â€”
 * anywhere you can put blocks! To use the video block within your app, you must have the
 * [links.embed:write](https://api.slack.com/scopes/links.embed:write) scope.
 * The metadata received in the block payload will be used to construct the description, provider, and title of the
 * video in all clients. Developers have the flexibility to leave non-mandatory fields null and use other blocks to
 * format this content.
 *
 * **[Requirements:](https://api.slack.com/reference/block-kit/blocks#video_requirements)**
 * - Video blocks can only be posted by apps; users are not allowed to post embedded videos directly from Block Kit
 * Builder.
 * - Your app must have the [links.embed:write](https://api.slack.com/scopes/links.embed:write) scope for both user
 * and bot tokens.
 * - `video_url` has to be included in the
 * [unfurl domains](https://api.slack.com/reference/messaging/link-unfurling#configuring_domains) specified in your
 * app.
 * - `video_url` should be publicly accessible, unless the app relies on information received from the
 * [Events API](https://api.slack.com/apis/connections/events-api) payloads to make a decision on whether the
 * viewer(s) of the content should have access. If so, the service could create a unique URL accessible only via
 * Slack.
 * - `video_url` must be compatible with an embeddable iFrame.
 * - `video_url` must return a 2xx code OR 3xx with less than 5 redirects and an eventual 2xx.
 * - `video_url` must not point to any Slack-related domain.
 *
 * **[Constraints:](https://api.slack.com/reference/block-kit/blocks#video__constraints)**
 * - Embeddable video players only (audio-only permitted)
 * - Navigation, scrolling and overlays are not allowed within the iFrame.
 * - Interactivity (e.g. likes, comments, and reactions) are allowed within your player but shouldn't completely
 * overlay or navigate away from the content being embedded. These interactions will be anonymous since no user
 * data is transferred to the embedded view.
 *
 * Example:
 * ```json
 * {
 *   "blocks": [
 *     {
 *       "type": "section",
 *       "text": {
 *         "type": "plain_text",
 *         "text": "I think it's super cool",
 *         "emoji": true
 *       }
 *     },
 *     {
 *       "type": "video",
 *       "title": {
 *         "type": "plain_text",
 *         "text": "How to use Slack.",
 *         "emoji": true
 *       },
 *       "title_url": "https://www.youtube.com/watch?v=RRxQQxiM7AA",
 *       "description": {
 *         "type": "plain_text",
 *         "text": "Slack is a nifty way to communicate with your team.",
 *         "emoji": true
 *       },
 *       "video_url": "https://www.youtube.com/embed/RRxQQxiM7AA?feature=oembed&autoplay=1",
 *       "alt_text": "How to use Slack?",
 *       "thumbnail_url": "https://i.ytimg.com/vi/RRxQQxiM7AA/hqdefault.jpg",
 *       "author_name": "Arcado Buendia",
 *       "provider_name": "YouTube",
 *       "provider_icon_url": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png"
 *     }
 *   ]
 * }
 * ```
 */
data class Video(
    /**
     * A unique identifier for a block. If not specified, a block_id will be generated by the Slack API.
     * You can use this [blockID] when you receive an interaction payload to identify the source of the action.
     * Maximum length for this field is 255 characters. [blockID] should be unique for each message and each iteration
     * of a message. If a message is updated, use a new [blockID].
     */
    @SerialName("block_id")
    override val blockID: BlockID?,
    /**
     * A tooltip for the video. Required for accessibility.
     */
    @SerialName("alt_text")
    val altText: String,
    /**
     * Author name to be displayed. Must be less than 50 characters.
     */
    @SerialName("author_name")
    val authorName: String?,
    /**
     * Description for video in the form of a [CompositionObject.Text.PlainText] object.
     * `text` within must be less than 200 characters.
     */
    val description: CompositionObject.Text.PlainText?,
    /**
     * Icon for the video provider, e.g. YouTube icon.
     */
    @SerialName("provider_icon_url")
    val providerIconUrl: URL?,
    /**
     * The originating application or domain of the video, e.g. YouTube.
     */
    @SerialName("provider_name")
    val providerName: String?,
    /**
     * The thumbnail image URL.
     */
    @SerialName("thumbnail_url")
    val thumbnailUrl: URL,
    /**
     * Video title in the form of a [CompositionObject.Text.PlainText].
     * `text` within must be less than 200 characters.
     */
    val title: CompositionObject.Text.PlainText,
    /**
     * Hyperlink for the title text.
     * Must correspond to the non-embeddable URL for the video.
     * Must go to an HTTPS URL.
     */
    @SerialName("title_url")
    val titleUrl: URL?,
    /**
     * The URL to be embedded. Must match any existing
     * [unfurl domains](https://api.slack.com/reference/messaging/link-unfurling#configuring_domains) within the app
     * and point to an HTTPS URL.
     */
    @SerialName("video_url")
    val videoUrl: URL
) : Block(type = Type.VIDEO)
