package eth.rochsolid.slack.blocks.models

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Blocks are a series of components that can be combined to create visually rich and compellingly interactive messages.
 * Read the guide to [building block layouts](https://api.slack.com/block-kit/building) to learn where and how to use
 * each of these components. You can include up to 50 blocks in each message, and 100 blocks in modals or Home tabs.
 */
@Serializable
sealed class Block(
    /**
     * The type of block.
     */
    val type: BlockType
) {
    /**
     * A unique identifier for a block. If not specified, a block_id will be generated by the Slack API.
     * You can use this [blockID] when you receive an interaction payload to identify the source of the action.
     * Maximum length for this field is 255 characters. [blockID] should be unique for each message and each iteration
     * of a message. If a message is updated, use a new [blockID].
     */
    @SerialName("block_id")
    abstract val blockID: BlockID?

    /**
     * A unique identifier for a block. Maximum length for this field is 255 characters.
     */
    @JvmInline
    @Serializable
    value class BlockID(val value: String)

    /**
     * The type of block.
     */
    @Serializable
    enum class BlockType {
        @SerialName("actions")
        ACTIONS,

        @SerialName("context")
        CONTEXT,

        @SerialName("divider")
        DIVIDER,

        @SerialName("file")
        FILE,

        @SerialName("header")
        HEADER,

        @SerialName("image")
        IMAGE,

        @SerialName("input")
        INPUT,

        @SerialName("rich_text")
        RICH_TEXT,

        @SerialName("section")
        SECTION,

        @SerialName("video")
        VIDEO,
    }

    /**
     * Holds multiple interactive [elements](https://api.slack.com/reference/block-kit/block-element).
     */
    data class Actions(
        override val blockID: BlockID?,
        /**
         * An array of interactive element objects - buttons, select menus, overflow menus, or date pickers.
         * There is a maximum of 25 elements in each action block.
         */
        val elements: List<Element>
    ) : Block(type = BlockType.ACTIONS)

    /**
     * Displays contextual info, which can include both images and text.
     */
    data class Context(
        override val blockID: BlockID?,
        /**
         * An array of image elements and text objects. Maximum number of items is 10.
         */
        val elements: List<Element>
    ) : Block(type = BlockType.CONTEXT)

    /**
     * Visually separates pieces of info inside a message.
     * A content divider, like an <hr>, to split up different blocks inside a message.
     * The divider block is nice and neat, requiring only a type.
     */
    data class Divider(
        override val blockID: BlockID?
    ) : Block(type = BlockType.DIVIDER)

    /**
     * Displays a [remote file](https://api.slack.com/messaging/files#remote).
     * You can't add this block to app surfaces directly, but it will show up when
     * [retrieving messages](https://api.slack.com/messaging/retrieving) that contain remote files.
     * If you want to add remote files to messages, [follow the guide](https://api.slack.com/messaging/files#remote).
     */
    data class File(
        override val blockID: BlockID?,
        /**
         * The external unique ID for this file.
         */
        val externalID: ExternalID,
        /**
         * At the moment, source will always be remote for a remote file.
         */
        val source: Source
    ) : Block(type = BlockType.FILE) {
        /**
         * The external unique ID for a file.
         */
        @JvmInline
        @Serializable
        value class ExternalID(val value: String)

        /**
         * At the moment, source will always be remote for a remote file.
         */
        enum class Source {
            @SerialName("remote")
            REMOTE
        }
    }

    /**
     * Displays a larger-sized text block.
     * A header is a plain-text block that displays in a larger, bold font.
     * Use it to delineate between different groups of content in your app's surfaces.
     */
    data class Header(
        override val blockID: BlockID?,
        /**
         * The text for the block, in the form of a [CompositionObject.Text.PlainText] text object.
         * Maximum length for the text in this field is 150 characters.
         */
        val text: CompositionObject.Text.PlainText
    ) : Block(type = BlockType.HEADER)
}
