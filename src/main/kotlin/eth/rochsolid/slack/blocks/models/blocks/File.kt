package eth.rochsolid.slack.blocks.models.blocks

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable


/**
 * Displays a [remote file](https://api.slack.com/messaging/files#remote).
 * You can't add this block to app surfaces directly, but it will show up when
 * [retrieving messages](https://api.slack.com/messaging/retrieving) that contain remote files.
 * If you want to add remote files to messages, [follow the guide](https://api.slack.com/messaging/files#remote).
 *
 * Example:
 * ```json
 * {
 *   "type": "file",
 *   "external_id": "ABCD1",
 *   "source": "remote",
 * }
 * ```
 */
data class File(
    /**
     * A unique identifier for a block. If not specified, a block_id will be generated by the Slack API.
     * You can use this [blockID] when you receive an interaction payload to identify the source of the action.
     * Maximum length for this field is 255 characters. [blockID] should be unique for each message and each iteration
     * of a message. If a message is updated, use a new [blockID].
     */
    @SerialName("block_id")
    override val blockID: BlockID?,
    /**
     * The external unique ID for this file.
     */
    val externalID: ExternalID,
    /**
     * At the moment, source will always be remote for a remote file.
     */
    val source: Source
) : Block(type = Type.FILE) {
    /**
     * The external unique ID for a file.
     */
    @JvmInline
    @Serializable
    value class ExternalID(val value: String)

    /**
     * At the moment, source will always be remote for a remote file.
     */
    enum class Source {
        @SerialName("remote")
        REMOTE
    }
}
